# coding: utf-8

"""


    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrgEclipseMicroprofileOpenapiModelsMediaSchema(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'write_only': 'bool',
        'nullable': 'bool',
        'default_value': 'JavaLangObject',
        'min_length': 'int',
        'deprecated': 'bool',
        'pattern': 'str',
        'description': 'str',
        'title': 'str',
        'type': 'str',
        'required': 'list[str]',
        'example': 'JavaLangObject',
        'exclusive_maximum': 'bool',
        'all_of': 'list[OrgEclipseMicroprofileOpenapiModelsMediaSchema]',
        '_not': 'OrgEclipseMicroprofileOpenapiModelsMediaSchema',
        'additional_properties_schema': 'OrgEclipseMicroprofileOpenapiModelsMediaSchema',
        'one_of': 'list[OrgEclipseMicroprofileOpenapiModelsMediaSchema]',
        'xml': 'OrgEclipseMicroprofileOpenapiModelsMediaXML',
        'max_properties': 'int',
        'enumeration': 'list[JavaLangObject]',
        'exclusive_minimum': 'bool',
        'multiple_of': 'JavaMathBigDecimal',
        'max_items': 'int',
        'format': 'str',
        'any_of': 'list[OrgEclipseMicroprofileOpenapiModelsMediaSchema]',
        'read_only': 'bool',
        'additional_properties_boolean': 'bool',
        'discriminator': 'OrgEclipseMicroprofileOpenapiModelsMediaDiscriminator',
        'min_properties': 'int',
        'min_items': 'int',
        'unique_items': 'bool',
        'maximum': 'JavaMathBigDecimal',
        'additional_properties': 'JavaLangObject',
        'external_docs': 'OrgEclipseMicroprofileOpenapiModelsExternalDocumentation',
        'minimum': 'JavaMathBigDecimal',
        'items': 'OrgEclipseMicroprofileOpenapiModelsMediaSchema',
        'max_length': 'int',
        'properties': 'list[object]'
    }

    attribute_map = {
        'write_only': 'writeOnly',
        'nullable': 'nullable',
        'default_value': 'defaultValue',
        'min_length': 'minLength',
        'deprecated': 'deprecated',
        'pattern': 'pattern',
        'description': 'description',
        'title': 'title',
        'type': 'type',
        'required': 'required',
        'example': 'example',
        'exclusive_maximum': 'exclusiveMaximum',
        'all_of': 'allOf',
        '_not': 'not',
        'additional_properties_schema': 'additionalPropertiesSchema',
        'one_of': 'oneOf',
        'xml': 'xml',
        'max_properties': 'maxProperties',
        'enumeration': 'enumeration',
        'exclusive_minimum': 'exclusiveMinimum',
        'multiple_of': 'multipleOf',
        'max_items': 'maxItems',
        'format': 'format',
        'any_of': 'anyOf',
        'read_only': 'readOnly',
        'additional_properties_boolean': 'additionalPropertiesBoolean',
        'discriminator': 'discriminator',
        'min_properties': 'minProperties',
        'min_items': 'minItems',
        'unique_items': 'uniqueItems',
        'maximum': 'maximum',
        'additional_properties': 'additionalProperties',
        'external_docs': 'externalDocs',
        'minimum': 'minimum',
        'items': 'items',
        'max_length': 'maxLength',
        'properties': 'properties'
    }

    def __init__(self, write_only=None, nullable=None, default_value=None, min_length=None, deprecated=None, pattern=None, description=None, title=None, type=None, required=None, example=None, exclusive_maximum=None, all_of=None, _not=None, additional_properties_schema=None, one_of=None, xml=None, max_properties=None, enumeration=None, exclusive_minimum=None, multiple_of=None, max_items=None, format=None, any_of=None, read_only=None, additional_properties_boolean=None, discriminator=None, min_properties=None, min_items=None, unique_items=None, maximum=None, additional_properties=None, external_docs=None, minimum=None, items=None, max_length=None, properties=None):  # noqa: E501
        """OrgEclipseMicroprofileOpenapiModelsMediaSchema - a model defined in Swagger"""  # noqa: E501
        self._write_only = None
        self._nullable = None
        self._default_value = None
        self._min_length = None
        self._deprecated = None
        self._pattern = None
        self._description = None
        self._title = None
        self._type = None
        self._required = None
        self._example = None
        self._exclusive_maximum = None
        self._all_of = None
        self.__not = None
        self._additional_properties_schema = None
        self._one_of = None
        self._xml = None
        self._max_properties = None
        self._enumeration = None
        self._exclusive_minimum = None
        self._multiple_of = None
        self._max_items = None
        self._format = None
        self._any_of = None
        self._read_only = None
        self._additional_properties_boolean = None
        self._discriminator = None
        self._min_properties = None
        self._min_items = None
        self._unique_items = None
        self._maximum = None
        self._additional_properties = None
        self._external_docs = None
        self._minimum = None
        self._items = None
        self._max_length = None
        self._properties = None
        self.discriminator = None
        if write_only is not None:
            self.write_only = write_only
        if nullable is not None:
            self.nullable = nullable
        if default_value is not None:
            self.default_value = default_value
        if min_length is not None:
            self.min_length = min_length
        if deprecated is not None:
            self.deprecated = deprecated
        if pattern is not None:
            self.pattern = pattern
        if description is not None:
            self.description = description
        if title is not None:
            self.title = title
        if type is not None:
            self.type = type
        if required is not None:
            self.required = required
        if example is not None:
            self.example = example
        if exclusive_maximum is not None:
            self.exclusive_maximum = exclusive_maximum
        if all_of is not None:
            self.all_of = all_of
        if _not is not None:
            self._not = _not
        if additional_properties_schema is not None:
            self.additional_properties_schema = additional_properties_schema
        if one_of is not None:
            self.one_of = one_of
        if xml is not None:
            self.xml = xml
        if max_properties is not None:
            self.max_properties = max_properties
        if enumeration is not None:
            self.enumeration = enumeration
        if exclusive_minimum is not None:
            self.exclusive_minimum = exclusive_minimum
        if multiple_of is not None:
            self.multiple_of = multiple_of
        if max_items is not None:
            self.max_items = max_items
        if format is not None:
            self.format = format
        if any_of is not None:
            self.any_of = any_of
        if read_only is not None:
            self.read_only = read_only
        if additional_properties_boolean is not None:
            self.additional_properties_boolean = additional_properties_boolean
        if discriminator is not None:
            self.discriminator = discriminator
        if min_properties is not None:
            self.min_properties = min_properties
        if min_items is not None:
            self.min_items = min_items
        if unique_items is not None:
            self.unique_items = unique_items
        if maximum is not None:
            self.maximum = maximum
        if additional_properties is not None:
            self.additional_properties = additional_properties
        if external_docs is not None:
            self.external_docs = external_docs
        if minimum is not None:
            self.minimum = minimum
        if items is not None:
            self.items = items
        if max_length is not None:
            self.max_length = max_length
        if properties is not None:
            self.properties = properties

    @property
    def write_only(self):
        """Gets the write_only of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The write_only of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: bool
        """
        return self._write_only

    @write_only.setter
    def write_only(self, write_only):
        """Sets the write_only of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param write_only: The write_only of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: bool
        """

        self._write_only = write_only

    @property
    def nullable(self):
        """Gets the nullable of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The nullable of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: bool
        """
        return self._nullable

    @nullable.setter
    def nullable(self, nullable):
        """Sets the nullable of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param nullable: The nullable of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: bool
        """

        self._nullable = nullable

    @property
    def default_value(self):
        """Gets the default_value of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The default_value of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: JavaLangObject
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param default_value: The default_value of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: JavaLangObject
        """

        self._default_value = default_value

    @property
    def min_length(self):
        """Gets the min_length of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The min_length of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: int
        """
        return self._min_length

    @min_length.setter
    def min_length(self, min_length):
        """Sets the min_length of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param min_length: The min_length of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: int
        """

        self._min_length = min_length

    @property
    def deprecated(self):
        """Gets the deprecated of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The deprecated of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: bool
        """
        return self._deprecated

    @deprecated.setter
    def deprecated(self, deprecated):
        """Sets the deprecated of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param deprecated: The deprecated of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: bool
        """

        self._deprecated = deprecated

    @property
    def pattern(self):
        """Gets the pattern of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The pattern of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: str
        """
        return self._pattern

    @pattern.setter
    def pattern(self, pattern):
        """Sets the pattern of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param pattern: The pattern of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: str
        """

        self._pattern = pattern

    @property
    def description(self):
        """Gets the description of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The description of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param description: The description of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def title(self):
        """Gets the title of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The title of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: str
        """
        return self._title

    @title.setter
    def title(self, title):
        """Sets the title of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param title: The title of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: str
        """

        self._title = title

    @property
    def type(self):
        """Gets the type of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The type of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param type: The type of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: str
        """
        allowed_values = ["integer", "number", "boolean", "string", "object", "array"]  # noqa: E501
        if type not in allowed_values:
            raise ValueError(
                "Invalid value for `type` ({0}), must be one of {1}"  # noqa: E501
                .format(type, allowed_values)
            )

        self._type = type

    @property
    def required(self):
        """Gets the required of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The required of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: list[str]
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param required: The required of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: list[str]
        """

        self._required = required

    @property
    def example(self):
        """Gets the example of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The example of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: JavaLangObject
        """
        return self._example

    @example.setter
    def example(self, example):
        """Sets the example of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param example: The example of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: JavaLangObject
        """

        self._example = example

    @property
    def exclusive_maximum(self):
        """Gets the exclusive_maximum of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The exclusive_maximum of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: bool
        """
        return self._exclusive_maximum

    @exclusive_maximum.setter
    def exclusive_maximum(self, exclusive_maximum):
        """Sets the exclusive_maximum of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param exclusive_maximum: The exclusive_maximum of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: bool
        """

        self._exclusive_maximum = exclusive_maximum

    @property
    def all_of(self):
        """Gets the all_of of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The all_of of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: list[OrgEclipseMicroprofileOpenapiModelsMediaSchema]
        """
        return self._all_of

    @all_of.setter
    def all_of(self, all_of):
        """Sets the all_of of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param all_of: The all_of of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: list[OrgEclipseMicroprofileOpenapiModelsMediaSchema]
        """

        self._all_of = all_of

    @property
    def _not(self):
        """Gets the _not of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The _not of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: OrgEclipseMicroprofileOpenapiModelsMediaSchema
        """
        return self.__not

    @_not.setter
    def _not(self, _not):
        """Sets the _not of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param _not: The _not of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: OrgEclipseMicroprofileOpenapiModelsMediaSchema
        """

        self.__not = _not

    @property
    def additional_properties_schema(self):
        """Gets the additional_properties_schema of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The additional_properties_schema of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: OrgEclipseMicroprofileOpenapiModelsMediaSchema
        """
        return self._additional_properties_schema

    @additional_properties_schema.setter
    def additional_properties_schema(self, additional_properties_schema):
        """Sets the additional_properties_schema of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param additional_properties_schema: The additional_properties_schema of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: OrgEclipseMicroprofileOpenapiModelsMediaSchema
        """

        self._additional_properties_schema = additional_properties_schema

    @property
    def one_of(self):
        """Gets the one_of of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The one_of of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: list[OrgEclipseMicroprofileOpenapiModelsMediaSchema]
        """
        return self._one_of

    @one_of.setter
    def one_of(self, one_of):
        """Sets the one_of of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param one_of: The one_of of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: list[OrgEclipseMicroprofileOpenapiModelsMediaSchema]
        """

        self._one_of = one_of

    @property
    def xml(self):
        """Gets the xml of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The xml of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: OrgEclipseMicroprofileOpenapiModelsMediaXML
        """
        return self._xml

    @xml.setter
    def xml(self, xml):
        """Sets the xml of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param xml: The xml of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: OrgEclipseMicroprofileOpenapiModelsMediaXML
        """

        self._xml = xml

    @property
    def max_properties(self):
        """Gets the max_properties of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The max_properties of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: int
        """
        return self._max_properties

    @max_properties.setter
    def max_properties(self, max_properties):
        """Sets the max_properties of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param max_properties: The max_properties of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: int
        """

        self._max_properties = max_properties

    @property
    def enumeration(self):
        """Gets the enumeration of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The enumeration of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: list[JavaLangObject]
        """
        return self._enumeration

    @enumeration.setter
    def enumeration(self, enumeration):
        """Sets the enumeration of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param enumeration: The enumeration of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: list[JavaLangObject]
        """

        self._enumeration = enumeration

    @property
    def exclusive_minimum(self):
        """Gets the exclusive_minimum of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The exclusive_minimum of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: bool
        """
        return self._exclusive_minimum

    @exclusive_minimum.setter
    def exclusive_minimum(self, exclusive_minimum):
        """Sets the exclusive_minimum of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param exclusive_minimum: The exclusive_minimum of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: bool
        """

        self._exclusive_minimum = exclusive_minimum

    @property
    def multiple_of(self):
        """Gets the multiple_of of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The multiple_of of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: JavaMathBigDecimal
        """
        return self._multiple_of

    @multiple_of.setter
    def multiple_of(self, multiple_of):
        """Sets the multiple_of of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param multiple_of: The multiple_of of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: JavaMathBigDecimal
        """

        self._multiple_of = multiple_of

    @property
    def max_items(self):
        """Gets the max_items of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The max_items of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: int
        """
        return self._max_items

    @max_items.setter
    def max_items(self, max_items):
        """Sets the max_items of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param max_items: The max_items of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: int
        """

        self._max_items = max_items

    @property
    def format(self):
        """Gets the format of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The format of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param format: The format of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: str
        """

        self._format = format

    @property
    def any_of(self):
        """Gets the any_of of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The any_of of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: list[OrgEclipseMicroprofileOpenapiModelsMediaSchema]
        """
        return self._any_of

    @any_of.setter
    def any_of(self, any_of):
        """Sets the any_of of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param any_of: The any_of of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: list[OrgEclipseMicroprofileOpenapiModelsMediaSchema]
        """

        self._any_of = any_of

    @property
    def read_only(self):
        """Gets the read_only of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The read_only of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: bool
        """
        return self._read_only

    @read_only.setter
    def read_only(self, read_only):
        """Sets the read_only of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param read_only: The read_only of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: bool
        """

        self._read_only = read_only

    @property
    def additional_properties_boolean(self):
        """Gets the additional_properties_boolean of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The additional_properties_boolean of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: bool
        """
        return self._additional_properties_boolean

    @additional_properties_boolean.setter
    def additional_properties_boolean(self, additional_properties_boolean):
        """Sets the additional_properties_boolean of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param additional_properties_boolean: The additional_properties_boolean of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: bool
        """

        self._additional_properties_boolean = additional_properties_boolean

    @property
    def discriminator(self):
        """Gets the discriminator of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The discriminator of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: OrgEclipseMicroprofileOpenapiModelsMediaDiscriminator
        """
        return self._discriminator

    @discriminator.setter
    def discriminator(self, discriminator):
        """Sets the discriminator of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param discriminator: The discriminator of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: OrgEclipseMicroprofileOpenapiModelsMediaDiscriminator
        """

        self._discriminator = discriminator

    @property
    def min_properties(self):
        """Gets the min_properties of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The min_properties of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: int
        """
        return self._min_properties

    @min_properties.setter
    def min_properties(self, min_properties):
        """Sets the min_properties of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param min_properties: The min_properties of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: int
        """

        self._min_properties = min_properties

    @property
    def min_items(self):
        """Gets the min_items of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The min_items of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: int
        """
        return self._min_items

    @min_items.setter
    def min_items(self, min_items):
        """Sets the min_items of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param min_items: The min_items of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: int
        """

        self._min_items = min_items

    @property
    def unique_items(self):
        """Gets the unique_items of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The unique_items of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: bool
        """
        return self._unique_items

    @unique_items.setter
    def unique_items(self, unique_items):
        """Sets the unique_items of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param unique_items: The unique_items of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: bool
        """

        self._unique_items = unique_items

    @property
    def maximum(self):
        """Gets the maximum of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The maximum of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: JavaMathBigDecimal
        """
        return self._maximum

    @maximum.setter
    def maximum(self, maximum):
        """Sets the maximum of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param maximum: The maximum of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: JavaMathBigDecimal
        """

        self._maximum = maximum

    @property
    def additional_properties(self):
        """Gets the additional_properties of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The additional_properties of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: JavaLangObject
        """
        return self._additional_properties

    @additional_properties.setter
    def additional_properties(self, additional_properties):
        """Sets the additional_properties of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param additional_properties: The additional_properties of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: JavaLangObject
        """

        self._additional_properties = additional_properties

    @property
    def external_docs(self):
        """Gets the external_docs of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The external_docs of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: OrgEclipseMicroprofileOpenapiModelsExternalDocumentation
        """
        return self._external_docs

    @external_docs.setter
    def external_docs(self, external_docs):
        """Sets the external_docs of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param external_docs: The external_docs of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: OrgEclipseMicroprofileOpenapiModelsExternalDocumentation
        """

        self._external_docs = external_docs

    @property
    def minimum(self):
        """Gets the minimum of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The minimum of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: JavaMathBigDecimal
        """
        return self._minimum

    @minimum.setter
    def minimum(self, minimum):
        """Sets the minimum of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param minimum: The minimum of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: JavaMathBigDecimal
        """

        self._minimum = minimum

    @property
    def items(self):
        """Gets the items of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The items of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: OrgEclipseMicroprofileOpenapiModelsMediaSchema
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param items: The items of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: OrgEclipseMicroprofileOpenapiModelsMediaSchema
        """

        self._items = items

    @property
    def max_length(self):
        """Gets the max_length of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The max_length of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: int
        """
        return self._max_length

    @max_length.setter
    def max_length(self, max_length):
        """Sets the max_length of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param max_length: The max_length of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: int
        """

        self._max_length = max_length

    @property
    def properties(self):
        """Gets the properties of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501


        :return: The properties of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :rtype: list[object]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.


        :param properties: The properties of this OrgEclipseMicroprofileOpenapiModelsMediaSchema.  # noqa: E501
        :type: list[object]
        """

        self._properties = properties

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgEclipseMicroprofileOpenapiModelsMediaSchema, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgEclipseMicroprofileOpenapiModelsMediaSchema):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

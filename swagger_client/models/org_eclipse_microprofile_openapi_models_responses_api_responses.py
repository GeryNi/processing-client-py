# coding: utf-8

"""


    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        '': 'OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponse',
        'api_response': 'OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponse',
        'default': 'OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponse',
        'default_value': 'OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponse',
        'api_responses': 'list[object]'
    }

    attribute_map = {
        'api_response': 'APIResponse',
        'default': 'default',
        'default_value': 'defaultValue',
        'api_responses': 'APIResponses'
    }

    def __init__(self, api_response=None, default=None, default_value=None, api_responses=None):  # noqa: E501
        """OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses - a model defined in Swagger"""  # noqa: E501
        self._ = None
        self._api_response = None
        self._default = None
        self._default_value = None
        self._api_responses = None
        self.discriminator = None
		
        if api_response is not None:
            self.api_response = api_response
        if default is not None:
            self.default = default
        if default_value is not None:
            self.default_value = default_value
        if api_responses is not None:
            self.api_responses = api_responses


    @property
    def api_response(self):
        """Gets the api_response of this OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses.  # noqa: E501


        :return: The api_response of this OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses.  # noqa: E501
        :rtype: OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponse
        """
        return self._api_response

    @api_response.setter
    def api_response(self, api_response):
        """Sets the api_response of this OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses.


        :param api_response: The api_response of this OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses.  # noqa: E501
        :type: OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponse
        """

        self._api_response = api_response

    @property
    def default(self):
        """Gets the default of this OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses.  # noqa: E501


        :return: The default of this OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses.  # noqa: E501
        :rtype: OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponse
        """
        return self._default

    @default.setter
    def default(self, default):
        """Sets the default of this OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses.


        :param default: The default of this OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses.  # noqa: E501
        :type: OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponse
        """

        self._default = default

    @property
    def default_value(self):
        """Gets the default_value of this OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses.  # noqa: E501


        :return: The default_value of this OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses.  # noqa: E501
        :rtype: OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponse
        """
        return self._default_value

    @default_value.setter
    def default_value(self, default_value):
        """Sets the default_value of this OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses.


        :param default_value: The default_value of this OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses.  # noqa: E501
        :type: OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponse
        """

        self._default_value = default_value

    @property
    def api_responses(self):
        """Gets the api_responses of this OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses.  # noqa: E501


        :return: The api_responses of this OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses.  # noqa: E501
        :rtype: list[object]
        """
        return self._api_responses

    @api_responses.setter
    def api_responses(self, api_responses):
        """Sets the api_responses of this OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses.


        :param api_responses: The api_responses of this OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses.  # noqa: E501
        :type: list[object]
        """

        self._api_responses = api_responses

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgEclipseMicroprofileOpenapiModelsResponsesAPIResponses):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

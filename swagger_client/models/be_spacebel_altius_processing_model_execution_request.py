# coding: utf-8

"""


    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class BeSpacebelAltiusProcessingModelExecutionRequest(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'outputs': 'list[object]',
        'job_id': 'str',
        'process_id': 'str',
        'inputs': 'list[object]',
        'executor': 'str',
        'priority': 'str',
        'version': 'str',
        'parent_id': 'str'
    }

    attribute_map = {
        'outputs': 'outputs',
        'job_id': 'jobId',
        'process_id': 'processId',
        'inputs': 'inputs',
        'executor': 'executor',
        'priority': 'priority',
        'version': 'version',
        'parent_id': 'parentId'
    }

    def __init__(self, outputs=None, job_id=None, process_id=None, inputs=None, executor=None, priority=None, version=None, parent_id=None):  # noqa: E501
        """BeSpacebelAltiusProcessingModelExecutionRequest - a model defined in Swagger"""  # noqa: E501
        self._outputs = None
        self._job_id = None
        self._process_id = None
        self._inputs = None
        self._executor = None
        self._priority = None
        self._version = None
        self._parent_id = None
        self.discriminator = None
        if outputs is not None:
            self.outputs = outputs
        self.job_id = job_id
        self.process_id = process_id
        self.inputs = inputs
        if executor is not None:
            self.executor = executor
        if priority is not None:
            self.priority = priority
        if version is not None:
            self.version = version
        if parent_id is not None:
            self.parent_id = parent_id

    @property
    def outputs(self):
        """Gets the outputs of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501


        :return: The outputs of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501
        :rtype: list[object]
        """
        return self._outputs

    @outputs.setter
    def outputs(self, outputs):
        """Sets the outputs of this BeSpacebelAltiusProcessingModelExecutionRequest.


        :param outputs: The outputs of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501
        :type: list[object]
        """

        self._outputs = outputs

    @property
    def job_id(self):
        """Gets the job_id of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501


        :return: The job_id of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501
        :rtype: str
        """
        return self._job_id

    @job_id.setter
    def job_id(self, job_id):
        """Sets the job_id of this BeSpacebelAltiusProcessingModelExecutionRequest.


        :param job_id: The job_id of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501
        :type: str
        """
        if job_id is None:
            raise ValueError("Invalid value for `job_id`, must not be `None`")  # noqa: E501

        self._job_id = job_id

    @property
    def process_id(self):
        """Gets the process_id of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501


        :return: The process_id of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501
        :rtype: str
        """
        return self._process_id

    @process_id.setter
    def process_id(self, process_id):
        """Sets the process_id of this BeSpacebelAltiusProcessingModelExecutionRequest.


        :param process_id: The process_id of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501
        :type: str
        """
        if process_id is None:
            raise ValueError("Invalid value for `process_id`, must not be `None`")  # noqa: E501

        self._process_id = process_id

    @property
    def inputs(self):
        """Gets the inputs of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501


        :return: The inputs of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501
        :rtype: list[object]
        """
        return self._inputs

    @inputs.setter
    def inputs(self, inputs):
        """Sets the inputs of this BeSpacebelAltiusProcessingModelExecutionRequest.


        :param inputs: The inputs of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501
        :type: list[object]
        """
        if inputs is None:
            raise ValueError("Invalid value for `inputs`, must not be `None`")  # noqa: E501

        self._inputs = inputs

    @property
    def executor(self):
        """Gets the executor of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501

        Define the preferred backend executor (a specific cluster or scheduler)  # noqa: E501

        :return: The executor of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501
        :rtype: str
        """
        return self._executor

    @executor.setter
    def executor(self, executor):
        """Sets the executor of this BeSpacebelAltiusProcessingModelExecutionRequest.

        Define the preferred backend executor (a specific cluster or scheduler)  # noqa: E501

        :param executor: The executor of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501
        :type: str
        """

        self._executor = executor

    @property
    def priority(self):
        """Gets the priority of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501

        Set a priority level in the queue  # noqa: E501

        :return: The priority of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501
        :rtype: str
        """
        return self._priority

    @priority.setter
    def priority(self, priority):
        """Sets the priority of this BeSpacebelAltiusProcessingModelExecutionRequest.

        Set a priority level in the queue  # noqa: E501

        :param priority: The priority of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501
        :type: str
        """
        allowed_values = ["LOW", "MEDIUM", "HIGH"]  # noqa: E501
        if priority not in allowed_values:
            raise ValueError(
                "Invalid value for `priority` ({0}), must be one of {1}"  # noqa: E501
                .format(priority, allowed_values)
            )

        self._priority = priority

    @property
    def version(self):
        """Gets the version of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501


        :return: The version of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501
        :rtype: str
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this BeSpacebelAltiusProcessingModelExecutionRequest.


        :param version: The version of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501
        :type: str
        """

        self._version = version

    @property
    def parent_id(self):
        """Gets the parent_id of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501


        :return: The parent_id of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501
        :rtype: str
        """
        return self._parent_id

    @parent_id.setter
    def parent_id(self, parent_id):
        """Sets the parent_id of this BeSpacebelAltiusProcessingModelExecutionRequest.


        :param parent_id: The parent_id of this BeSpacebelAltiusProcessingModelExecutionRequest.  # noqa: E501
        :type: str
        """

        self._parent_id = parent_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(BeSpacebelAltiusProcessingModelExecutionRequest, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BeSpacebelAltiusProcessingModelExecutionRequest):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

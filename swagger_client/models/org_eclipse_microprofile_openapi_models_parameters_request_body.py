# coding: utf-8

"""


    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrgEclipseMicroprofileOpenapiModelsParametersRequestBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'content': 'OrgEclipseMicroprofileOpenapiModelsMediaContent',
        'required': 'bool'
    }

    attribute_map = {
        'description': 'description',
        'content': 'content',
        'required': 'required'
    }

    def __init__(self, description=None, content=None, required=None):  # noqa: E501
        """OrgEclipseMicroprofileOpenapiModelsParametersRequestBody - a model defined in Swagger"""  # noqa: E501
        self._description = None
        self._content = None
        self._required = None
        self.discriminator = None
        if description is not None:
            self.description = description
        if content is not None:
            self.content = content
        if required is not None:
            self.required = required

    @property
    def description(self):
        """Gets the description of this OrgEclipseMicroprofileOpenapiModelsParametersRequestBody.  # noqa: E501


        :return: The description of this OrgEclipseMicroprofileOpenapiModelsParametersRequestBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this OrgEclipseMicroprofileOpenapiModelsParametersRequestBody.


        :param description: The description of this OrgEclipseMicroprofileOpenapiModelsParametersRequestBody.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def content(self):
        """Gets the content of this OrgEclipseMicroprofileOpenapiModelsParametersRequestBody.  # noqa: E501


        :return: The content of this OrgEclipseMicroprofileOpenapiModelsParametersRequestBody.  # noqa: E501
        :rtype: OrgEclipseMicroprofileOpenapiModelsMediaContent
        """
        return self._content

    @content.setter
    def content(self, content):
        """Sets the content of this OrgEclipseMicroprofileOpenapiModelsParametersRequestBody.


        :param content: The content of this OrgEclipseMicroprofileOpenapiModelsParametersRequestBody.  # noqa: E501
        :type: OrgEclipseMicroprofileOpenapiModelsMediaContent
        """

        self._content = content

    @property
    def required(self):
        """Gets the required of this OrgEclipseMicroprofileOpenapiModelsParametersRequestBody.  # noqa: E501


        :return: The required of this OrgEclipseMicroprofileOpenapiModelsParametersRequestBody.  # noqa: E501
        :rtype: bool
        """
        return self._required

    @required.setter
    def required(self, required):
        """Sets the required of this OrgEclipseMicroprofileOpenapiModelsParametersRequestBody.


        :param required: The required of this OrgEclipseMicroprofileOpenapiModelsParametersRequestBody.  # noqa: E501
        :type: bool
        """

        self._required = required

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgEclipseMicroprofileOpenapiModelsParametersRequestBody, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgEclipseMicroprofileOpenapiModelsParametersRequestBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

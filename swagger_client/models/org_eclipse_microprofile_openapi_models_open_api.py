# coding: utf-8

"""


    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OrgEclipseMicroprofileOpenapiModelsOpenAPI(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'security': 'list[OrgEclipseMicroprofileOpenapiModelsSecuritySecurityRequirement]',
        'components': 'OrgEclipseMicroprofileOpenapiModelsComponents',
        'servers': 'list[OrgEclipseMicroprofileOpenapiModelsServersServer]',
        'openapi': 'str',
        'paths': 'OrgEclipseMicroprofileOpenapiModelsPaths',
        'external_docs': 'OrgEclipseMicroprofileOpenapiModelsExternalDocumentation',
        'info': 'OrgEclipseMicroprofileOpenapiModelsInfoInfo',
        'tags': 'list[OrgEclipseMicroprofileOpenapiModelsTagsTag]'
    }

    attribute_map = {
        'security': 'security',
        'components': 'components',
        'servers': 'servers',
        'openapi': 'openapi',
        'paths': 'paths',
        'external_docs': 'externalDocs',
        'info': 'info',
        'tags': 'tags'
    }

    def __init__(self, security=None, components=None, servers=None, openapi=None, paths=None, external_docs=None, info=None, tags=None):  # noqa: E501
        """OrgEclipseMicroprofileOpenapiModelsOpenAPI - a model defined in Swagger"""  # noqa: E501
        self._security = None
        self._components = None
        self._servers = None
        self._openapi = None
        self._paths = None
        self._external_docs = None
        self._info = None
        self._tags = None
        self.discriminator = None
        if security is not None:
            self.security = security
        if components is not None:
            self.components = components
        if servers is not None:
            self.servers = servers
        if openapi is not None:
            self.openapi = openapi
        if paths is not None:
            self.paths = paths
        if external_docs is not None:
            self.external_docs = external_docs
        if info is not None:
            self.info = info
        if tags is not None:
            self.tags = tags

    @property
    def security(self):
        """Gets the security of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501


        :return: The security of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501
        :rtype: list[OrgEclipseMicroprofileOpenapiModelsSecuritySecurityRequirement]
        """
        return self._security

    @security.setter
    def security(self, security):
        """Sets the security of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.


        :param security: The security of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501
        :type: list[OrgEclipseMicroprofileOpenapiModelsSecuritySecurityRequirement]
        """

        self._security = security

    @property
    def components(self):
        """Gets the components of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501


        :return: The components of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501
        :rtype: OrgEclipseMicroprofileOpenapiModelsComponents
        """
        return self._components

    @components.setter
    def components(self, components):
        """Sets the components of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.


        :param components: The components of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501
        :type: OrgEclipseMicroprofileOpenapiModelsComponents
        """

        self._components = components

    @property
    def servers(self):
        """Gets the servers of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501


        :return: The servers of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501
        :rtype: list[OrgEclipseMicroprofileOpenapiModelsServersServer]
        """
        return self._servers

    @servers.setter
    def servers(self, servers):
        """Sets the servers of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.


        :param servers: The servers of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501
        :type: list[OrgEclipseMicroprofileOpenapiModelsServersServer]
        """

        self._servers = servers

    @property
    def openapi(self):
        """Gets the openapi of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501


        :return: The openapi of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501
        :rtype: str
        """
        return self._openapi

    @openapi.setter
    def openapi(self, openapi):
        """Sets the openapi of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.


        :param openapi: The openapi of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501
        :type: str
        """

        self._openapi = openapi

    @property
    def paths(self):
        """Gets the paths of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501


        :return: The paths of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501
        :rtype: OrgEclipseMicroprofileOpenapiModelsPaths
        """
        return self._paths

    @paths.setter
    def paths(self, paths):
        """Sets the paths of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.


        :param paths: The paths of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501
        :type: OrgEclipseMicroprofileOpenapiModelsPaths
        """

        self._paths = paths

    @property
    def external_docs(self):
        """Gets the external_docs of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501


        :return: The external_docs of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501
        :rtype: OrgEclipseMicroprofileOpenapiModelsExternalDocumentation
        """
        return self._external_docs

    @external_docs.setter
    def external_docs(self, external_docs):
        """Sets the external_docs of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.


        :param external_docs: The external_docs of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501
        :type: OrgEclipseMicroprofileOpenapiModelsExternalDocumentation
        """

        self._external_docs = external_docs

    @property
    def info(self):
        """Gets the info of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501


        :return: The info of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501
        :rtype: OrgEclipseMicroprofileOpenapiModelsInfoInfo
        """
        return self._info

    @info.setter
    def info(self, info):
        """Sets the info of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.


        :param info: The info of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501
        :type: OrgEclipseMicroprofileOpenapiModelsInfoInfo
        """

        self._info = info

    @property
    def tags(self):
        """Gets the tags of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501


        :return: The tags of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501
        :rtype: list[OrgEclipseMicroprofileOpenapiModelsTagsTag]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.


        :param tags: The tags of this OrgEclipseMicroprofileOpenapiModelsOpenAPI.  # noqa: E501
        :type: list[OrgEclipseMicroprofileOpenapiModelsTagsTag]
        """

        self._tags = tags

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OrgEclipseMicroprofileOpenapiModelsOpenAPI, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OrgEclipseMicroprofileOpenapiModelsOpenAPI):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other

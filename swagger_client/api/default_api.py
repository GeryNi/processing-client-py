# coding: utf-8

"""


    
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DefaultApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get(self, **kwargs):  # noqa: E501
        """get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgEclipseMicroprofileOpenapiModelsOpenAPI
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_with_http_info(self, **kwargs):  # noqa: E501
        """get  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: OrgEclipseMicroprofileOpenapiModelsOpenAPI
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['*/*'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/processing/openapi', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='OrgEclipseMicroprofileOpenapiModelsOpenAPI',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_checks1(self, **kwargs):  # noqa: E501
        """get_checks1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_checks1(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_checks1_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_checks1_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_checks1_with_http_info(self, **kwargs):  # noqa: E501
        """get_checks1  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_checks1_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_checks1" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/processing/health', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_json123(self, registry, metric, **kwargs):  # noqa: E501
        """get_json123  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_json123(registry, metric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registry: (required)
        :param str metric: (required)
        :return: JavaLangObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_json123_with_http_info(registry, metric, **kwargs)  # noqa: E501
        else:
            (data) = self.get_json123_with_http_info(registry, metric, **kwargs)  # noqa: E501
            return data

    def get_json123_with_http_info(self, registry, metric, **kwargs):  # noqa: E501
        """get_json123  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_json123_with_http_info(registry, metric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registry: (required)
        :param str metric: (required)
        :return: JavaLangObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registry', 'metric']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_json123" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry' is set
        if ('registry' not in params or
                params['registry'] is None):
            raise ValueError("Missing the required parameter `registry` when calling `get_json123`")  # noqa: E501
        # verify the required parameter 'metric' is set
        if ('metric' not in params or
                params['metric'] is None):
            raise ValueError("Missing the required parameter `metric` when calling `get_json123`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registry' in params:
            path_params['registry'] = params['registry']  # noqa: E501
        if 'metric' in params:
            path_params['metric'] = params['metric']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/processing/metrics/{registry}/{metric}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JavaLangObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_json12345(self, **kwargs):  # noqa: E501
        """get_json12345  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_json12345(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: JavaLangObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_json12345_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_json12345_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_json12345_with_http_info(self, **kwargs):  # noqa: E501
        """get_json12345  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_json12345_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :return: JavaLangObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_json12345" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/processing/metrics', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JavaLangObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadata12(self, registry, **kwargs):  # noqa: E501
        """get_metadata12  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata12(registry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registry: (required)
        :return: JavaLangObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metadata12_with_http_info(registry, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata12_with_http_info(registry, **kwargs)  # noqa: E501
            return data

    def get_metadata12_with_http_info(self, registry, **kwargs):  # noqa: E501
        """get_metadata12  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata12_with_http_info(registry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registry: (required)
        :return: JavaLangObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registry']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata12" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry' is set
        if ('registry' not in params or
                params['registry'] is None):
            raise ValueError("Missing the required parameter `registry` when calling `get_metadata12`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registry' in params:
            path_params['registry'] = params['registry']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/processing/metrics/{registry}', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JavaLangObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadata123(self, registry, metric, **kwargs):  # noqa: E501
        """get_metadata123  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata123(registry, metric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registry: (required)
        :param str metric: (required)
        :return: JavaLangObject
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_metadata123_with_http_info(registry, metric, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata123_with_http_info(registry, metric, **kwargs)  # noqa: E501
            return data

    def get_metadata123_with_http_info(self, registry, metric, **kwargs):  # noqa: E501
        """get_metadata123  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_metadata123_with_http_info(registry, metric, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registry: (required)
        :param str metric: (required)
        :return: JavaLangObject
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registry', 'metric']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata123" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry' is set
        if ('registry' not in params or
                params['registry'] is None):
            raise ValueError("Missing the required parameter `registry` when calling `get_metadata123`")  # noqa: E501
        # verify the required parameter 'metric' is set
        if ('metric' not in params or
                params['metric'] is None):
            raise ValueError("Missing the required parameter `metric` when calling `get_metadata123`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registry' in params:
            path_params['registry'] = params['registry']  # noqa: E501
        if 'metric' in params:
            path_params['metric'] = params['metric']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/processing/metrics/{registry}/{metric}', 'OPTIONS',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='JavaLangObject',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_text12345(self, registry, **kwargs):  # noqa: E501
        """get_text12345  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_text12345(registry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registry: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_text12345_with_http_info(registry, **kwargs)  # noqa: E501
        else:
            (data) = self.get_text12345_with_http_info(registry, **kwargs)  # noqa: E501
            return data

    def get_text12345_with_http_info(self, registry, **kwargs):  # noqa: E501
        """get_text12345  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_text12345_with_http_info(registry, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str registry: (required)
        :return: str
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['registry']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_text12345" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'registry' is set
        if ('registry' not in params or
                params['registry'] is None):
            raise ValueError("Missing the required parameter `registry` when calling `get_text12345`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'registry' in params:
            path_params['registry'] = params['registry']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/plain'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/processing/metrics/{registry}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='str',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
